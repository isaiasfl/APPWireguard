name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build-and-release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "ubuntu-22.04"
            args: "--target x86_64-unknown-linux-gnu"

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          # Remover paquetes conflictivos primero
          sudo apt-get remove -y libappindicator3-dev || true
          sudo apt-get autoremove -y

          # Instalar dependencias corregidas
          sudo apt-get install -y \
            build-essential \
            curl \
            wget \
            file \
            patchelf \
            librsvg2-dev \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            libjavascriptcoregtk-4.0-dev \
            libsoup2.4-dev \
            wireguard-tools

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'ubuntu-22.04' && 'x86_64-unknown-linux-gnu' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "npm"

      - name: Clear npm cache
        run: npm cache clean --force

      - name: Install frontend dependencies
        run: |
          npm install
          npm ls --depth=0

      - name: Debug project structure
        run: |
          echo "=== Working directory ==="
          pwd
          echo "=== Project structure ==="
          ls -la src/
          echo "=== Checking index.css ==="
          ls -la src/index.css
          echo "=== Checking polkit rules ==="
          ls -la 99-appwireguard.rules
          echo "=== From src-tauri perspective ==="
          cd src-tauri && ls -la ../99-appwireguard.rules
          echo "=== Node modules ==="
          ls -la node_modules/ | head -20

      - name: Build the app
        uses: tauri-apps/tauri-action@v0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "APP WireGuard v__VERSION__"
          releaseBody: |
            ## ðŸš€ Nueva versiÃ³n de APP WireGuard v__VERSION__

            ### ðŸ“¦ Descargas disponibles:
            - **Ubuntu/Debian**: `.deb`
            - **Fedora/RHEL**: `.rpm` 
            - **Universal Linux**: `.AppImage`

            ### ðŸ”§ InstalaciÃ³n:
            - **Ubuntu/Debian**: `sudo dpkg -i appwireguard_*_amd64.deb`
            - **Fedora**: `sudo rpm -i appwireguard-*-1.x86_64.rpm`
            - **AppImage**: `chmod +x appwireguard_*_amd64.AppImage && ./appwireguard_*_amd64.AppImage`

            ### ðŸ“‹ Dependencias requeridas:
            - wireguard-tools
            - sudo

            Ver el [CHANGELOG](https://github.com/isaiasfl/APPWireguard/blob/main/CLAUDE.md) para mÃ¡s detalles.
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}
